services:
  app:
    platform: linux/amd64
    image: docker.io/germandilio/lms_backend:latest
    ports:
      - "3000:3000"
    environment:
      - JWT_SECRET_KEY=sadklfhasl2389462klsdhfls23947230skalhfaksj290472390askdhfklsh2093742sklhflkasdh20947230sdkahfklahs20394729salkhdfkla239047230klsdahfkls2390472klsdhfl23904723kladshf239047klsdhjf
      - JWT_EXPIRATION=86400
      - SMTP_PASSWORD=fnujckpgqhmaetpy
      - SMTP_USERNAME=glmikhaylov@edu.hse.ru
      - MAIL_SENDING_ENABLED=true
      - SERVER_PORT=3000
      - MASTER_URL=r2dbc:pool:postgresql://lms_dev_backend:lms_backend_dev_password@pg-0:5432/lms_db
      - SLAVE_URL=r2dbc:pool:postgresql://lms_dev_backend:lms_backend_dev_password@pg-1:5432/lms_db?readOnly=true
      - POSTGRESQL_PASSWORD=lms_backend_dev_password
      - POSTGRESQL_USERNAME=lms_dev_backend
      - R2DBC_LIQUIBASE_URL=r2dbc:postgresql://pg-0:5432/lms_db
    depends_on:
      pg-0:
        condition: service_healthy
      pg-1:
        condition: service_healthy

  nextjs:
    image: docker.io/fnmn777/frontend-nextjs
    ports:
      - '3001:3000'
    platform: linux/amd64
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_BACKEND_URL=http://209.38.188.191:3000
      - S3_ENDPOINT_URL=https://fra1.digitaloceanspaces.com
      - S3_BUCKET_NAME=lms-entrepreneurship-school-s3
      - S3_ACCESS_KEY_ID=DO00EZY6GGGNJBKDFZJ6
      - S3_SECRET_ACCESS_KEY=YD/GWaSkEAT891SjCUW8cB5KJZ8jG70MzQLeBJ/J7/8
      - DIGITALOCEAN_API_KEY=dop_v1_b25e9cdd380fc72eb32b410f23b7a9130522a7918bc44fda4ce24bd1355adb24

  pg-0:
    image: docker.io/bitnami/postgresql-repmgr:16.2.0
    ports:
      - "5433:5432"
    volumes:
      - pg_0_data:/bitnami/postgresql
    environment:
      - POSTGRESQL_POSTGRES_PASSWORD=lms_admin_db_password
      - POSTGRESQL_USERNAME=lms_dev_backend
      - POSTGRESQL_PASSWORD=lms_backend_dev_password
      - POSTGRESQL_DATABASE=lms_db
      - REPMGR_PASSWORD=repmgr_password
      - REPMGR_PRIMARY_HOST=pg-0
      - REPMGR_PRIMARY_PORT=5432
      - REPMGR_PARTNER_NODES=pg-0:5432,pg-1:5432
      - REPMGR_NODE_NAME=pg-0
      - REPMGR_NODE_NETWORK_NAME=pg-0
      - REPMGR_PORT_NUMBER=5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U lms_dev_backend -d lms_db" ]
      interval: 5s
      timeout: 5s
      retries: 5

  pg-1:
    image: docker.io/bitnami/postgresql-repmgr:16.2.0
    ports:
      - "5434:5432"
    volumes:
      - pg_1_data:/bitnami/postgresql
    environment:
      - POSTGRESQL_POSTGRES_PASSWORD=lms_admin_db_password
      - POSTGRESQL_USERNAME=lms_dev_backend
      - POSTGRESQL_PASSWORD=lms_backend_dev_password
      - POSTGRESQL_DATABASE=lms_db
      - REPMGR_PASSWORD=repmgr_password
      - REPMGR_PRIMARY_HOST=pg-0
      - REPMGR_PRIMARY_PORT=5432
      - REPMGR_PARTNER_NODES=pg-0:5432,pg-1:5432
      - REPMGR_NODE_NAME=pg-1
      - REPMGR_NODE_NETWORK_NAME=pg-1
      - REPMGR_PORT_NUMBER=5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U lms_dev_backend -d lms_db" ]
      interval: 5s
      timeout: 5s
      retries: 5

  tempo:
    image: grafana/tempo
    extra_hosts: [ '172.17.0.1:host-gateway' ]
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - /usr/local/docker/tempo/tempo-local.yaml:/etc/tempo.yaml:ro
    ports:
      - "14268"  # jaeger ingest
      - "9411:9411" # zipkin

  loki:
    image: grafana/loki
    extra_hosts: [ '172.17.0.1:host-gateway' ]
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    ports:
      - "3100:3100"                                   # loki needs to be exposed so it receives logs
    environment:
      - JAEGER_AGENT_HOST=tempo
      - JAEGER_ENDPOINT=http://tempo:14268/api/traces # send traces to Tempo
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1

  prometheus:
    image: prom/prometheus
    extra_hosts: [ '172.17.0.1:host-gateway' ]
    command:
      - --enable-feature=exemplar-storage
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - /usr/local/docker/prometheus:/etc/prometheus:ro
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana
    extra_hosts: [ '172.17.0.1:host-gateway' ]
    volumes:
      - /usr/local/docker/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - /usr/local/docker/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3005:3000"


volumes:
  pg_0_data:
    driver: local
  pg_1_data:
    driver: local

networks:
  lms_network:
    driver: bridge
